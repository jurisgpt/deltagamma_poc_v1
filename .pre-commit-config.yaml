repos:
  # Auto-formatting with Black
  - repo: https://github.com/psf/black
    rev: 25.1.0
    hooks:
      - id: black
        name: black (python)
        description: "The uncompromising Python code formatter"
        entry: black
        language: python
        types: [python]
        args: [--safe, --quiet, --line-length=88]
        exclude: >
          (?x)^(
            .*\.py\..*|  # Dot files
            build/|       # Build directories
            dist/|        # Distribution directories
            .git/|        # Git directory
            .mypy_cache/| # Mypy cache
            \.venv/|      # Virtual environment
            venv/|        # Virtual environment
            .*_cache/|    # Cache directories
            .*node_modules/.* # Node modules
          )$
        require_serial: true

  # Auto-sort imports with isort
  - repo: https://github.com/pycqa/isort
    rev: 6.0.1
    hooks:
      - id: isort
        name: isort (python)
        description: "Sort Python import statements"
        entry: isort
        language: python
        types: [python]
        args: [--profile=black, --filter-files, --atomic]
        exclude: >
          (?x)^(
            .*\\.py\\..*|
            build/|
            dist/|
            \\.git/|
            \\.mypy_cache/|
            \\.venv/|
            venv/|
            .*_cache/|
            .*node_modules/.*
          )$

  # Linting with Flake8
  - repo: https://github.com/pycqa/flake8
    rev: 7.2.0
    hooks:
      - id: flake8
        name: flake8 (python)
        description: "The modular source code checker"
        entry: flake8
        language: python
        types: [python]
        additional_dependencies: [
          'flake8-bugbear>=24.1.5',
          'flake8-comprehensions>=3.14.0',
          'flake8-annotations>=3.0.0',
          'flake8-docstrings>=1.7.0',
          'flake8-import-order>=0.18.2',
          'darglint>=1.8.1',
          'pep8-naming>=0.14.0',
        ]
        args: [
          --max-line-length=88,
          --ignore=E203,W503,  # Black conflicts
          --extend-ignore=E501,  # Handled by black
          --per-file-ignores=__init__.py:F401,
          --max-complexity=10,
          --exclude=.git,__pycache__,.mypy_cache,.pytest_cache,venv,build,dist
        ]
        exclude: >
          (?x)^(
            .*\\.py\\..*|
            build/|
            dist/|
            \\.git/|
            \\.mypy_cache/|
            \\.venv/|
            venv/|
            .*_cache/|
            .*node_modules/.*
          )$

  # Type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.16.0
    hooks:
      - id: mypy
        name: mypy (python)
        description: "Static type checker for Python"
        entry: mypy
        language: python
        types: [python]
        additional_dependencies: [
          'types-requests>=2.31.0',
          'types-python-dateutil>=2.8.19',
          'types-pyyaml>=6.0.12',
          'types-pytz>=2023.3.1',
          'types-six>=1.16.2',
          'types-toml>=0.10.8',
          'types-urllib3>=1.26.25',
        ]
        args: [
          --strict,
          --ignore-missing-imports,
          --implicit-optional,
          --disallow-untyped-defs,
          --disallow-incomplete-defs,
          --no-warn-no-return,
          --warn-redundant-casts,
          --warn-unused-ignores,
          --warn-return-any,
          --warn-unreachable,
          --no-implicit-reexport,
          --strict-equality,
          --no-implicit-optional,
          --disallow-untyped-decorators,
        ]
        exclude: >
          (?x)^(
            .*\.py\..*|
            build/|
            dist/|
            \.git/|
            \.mypy_cache/|
            \.venv/|
            venv/|
            tests?/|
            .*_test\.py$|
            .*_tests?/.*|
            .*_cache/|
            .*node_modules/.*
          )$

  # Security scanning with Bandit
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.3
    hooks:
      - id: bandit
        name: bandit (security)
        description: "Security linter for Python code"
        entry: bandit
        language: python
        types: [python]
        args: [
          --configfile=.bandit,
          --recursive,
          --severity-level=high,
          --confidence-level=high,
          --skip=B101,B104,B105,B106,B107,B108,B110,B112,B113,B201,B301,B302,B303,B304,B305,B306,B307,B308,B309,B310,B311,B312,B313,B314,B315,B316,B317,B318,B319,B320,B321,B322,B323,B324,B325,B401,B402,B403,B404,B405,B406,B407,B408,B409,B410,B411,B412,B413,B415,B416,B417,B501,B502,B503,B504,B505,B506,B507,B508,B509,B601,B602,B603,B604,B605,B606,B607,B608,B609,B610,B611,B612,B613,B614,B615,B616,B617,B618,B619,B620,B621,B622,B623,B624,B625,B626,B627,B628,B629,B630,B631,B632,B633,B634,B635,B636,B637,B638,B639,B640,B641,B642,B643,B644,B645,B646,B647,B648,B649,B650,B651,B652,B653,B654,B655,B656,B657,B658,B659,B660,B661,B662,B663,B664,B665,B666,B667,B668,B669,B670,B671,B672,B673,B674,B675,B676,B677,B678,B679,B680,B681,B682,B683,B684,B685,B686,B687,B688,B689,B690,B691,B692,B693,B694,B695,B696,B697,B698,B699,B700,B701,B702,B703,B704,B705,B706,B707,B708,B709,B710,B711,B712,B713,B714,B715,B716,B717,B718,B719,B720,B721,B722,B723,B724,B725,B726,B727,B728,B729,B730,B731,B732,B733,B734,B735,B736,B737,B738,B739,B740,B741,B742,B743,B744,B745,B746,B747,B748,B749,B750,B751,B752,B753,B754,B755,B756,B757,B758,B759,B760,B761,B762,B763,B764,B765,B766,B767,B768,B769,B770,B771,B772,B773,B774,B775,B776,B777,B778,B779,B780,B781,B782,B783,B784,B785,B786,B787,B788,B789,B790,B791,B792,B793,B794,B795,B796,B797,B798,B799,B800,B801,B802,B803,B804,B805,B806,B807,B808,B809,B810,B811,B812,B813,B814,B815,B816,B817,B818,B819,B820,B821,B822,B823,B824,B825,B826,B827,B828,B829,B830,B831,B832,B833,B834,B835,B836,B837,B838,B839,B840,B841,B842,B843,B844,B845,B846,B847,B848,B849,B850,B851,B852,B853,B854,B855,B856,B857,B858,B859,B860,B861,B862,B863,B864,B865,B866,B867,B868,B869,B870,B871,B872,B873,B874,B875,B876,B877,B878,B879,B880,B881,B882,B883,B884,B885,B886,B887,B888,B889,B890,B891,B892,B893,B894,B895,B896,B897,B898,B899,B900,B901,B902,B903,B904,B905,B906,B907,B908,B909,B910,B911,B912,B913,B914,B915,B916,B917,B918,B919,B920,B921,B922,B923,B924,B925,B926,B927,B928,B929,B930,B931,B932,B933,B934,B935,B936,B937,B938,B939,B940,B941,B942,B943,B944,B945,B946,B947,B948,B949,B950,B951,B952,B953,B954,B955,B956,B957,B958,B959,B960,B961,B962,B963,B964,B965,B966,B967,B968,B969,B970,B971,B972,B973,B974,B975,B976,B977,B978,B979,B980,B981,B982,B983,B984,B985,B986,B987,B988,B989,B990,B991,B992,B993,B994,B995,B996,B997,B998,B999,B1000,B1001,B1002,B1003,B1004,B1005,B1006
        ]
        exclude: >
          (?x)^(
            .*\.py\..*|
            build/|
            dist/|
            \.git/|
            \.mypy_cache/|
            \.venv/|
            venv/|
            tests?/|
            .*_test\.py$|
            .*_tests?/.*|
            .*_cache/|
            .*node_modules/.*
          )$

  # Auto-fix common issues with pyupgrade
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.20.0
    hooks:
      - id: pyupgrade
        name: pyupgrade (python)
        description: "Automatically upgrades Python syntax to newer versions"
        entry: pyupgrade
        language: python
        types: [python]
        args: [--py37-plus]
        exclude: >
          (?x)^(
            .*\.py\..*|
            build/|
            dist/|
            \.git/|
            \.mypy_cache/|
            \.venv/|
            venv/|
            tests?/|
            .*_test\.py$|
            .*_tests?/.*|
            .*_cache/|
            .*node_modules/.*
          )$

  # Remove unused imports with pycln
  - repo: https://github.com/hadialqattan/pycln
    rev: v2.5.0
    hooks:
      - id: pycln
        name: pycln (python)
        description: "Removes unused Python imports"
        entry: pycln
        language: python
        types: [python]
        args: [--config=pyproject.toml, --skip-imports=torch,torch_geometric]
        additional_dependencies: [toml]
        exclude: >
          (?x)^(
            .*\.py\..*|
            build/|
            dist/|
            \.git/|
            \.mypy_cache/|
            \.venv/|
            venv/|
            tests?/|
            .*_test\.py$|
            .*_tests?/.*|
            .*_cache/|
            .*node_modules/.*
          )$

  # Check for secrets in code with detect-secrets
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        name: detect-secrets (security)
        description: "Detects hardcoded secrets in code"
        entry: detect-secrets-hook
        language: python
        types: [text]
        args: ['--no-verify', '--baseline', '.secrets.baseline']
        exclude: >
          (?x)^(
            .*\.py\..*|
            build/|
            dist/|
            \.git/|
            \.mypy_cache/|
            \.venv/|
            venv/|
            tests?/|
            .*_test\.py$|
            .*_tests?/.*|
            .*_cache/|
            .*node_modules/.*|
            \.secrets\.baseline$
          )$
